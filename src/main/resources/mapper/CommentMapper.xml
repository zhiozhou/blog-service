<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="priv.zhou.domain.dao.CommentDAO">

    <resultMap id="commentMap" type="CommentPO">
        <id column="id" property="id"/>
        <result column="blog_id" property="blogId"/>
        <result column="topic_id" property="topicId"/>
        <result column="content" property="content"/>
        <result column="state" property="state"/>
        <result column="reply_count" property="replyCount"/>
        <result column="gmt_create" property="gmtCreate"/>
        <association property="fromVisitor" javaType="VisitorPO">
            <id column="topic_from_id" property="id"/>
            <result column="topic_from_nickname" property="nickname"/>
            <result column="topic_from_website" property="website"/>
            <result column="topic_from_avatar" property="avatar"/>
            <result column="topic_from_badge" property="badge"/>
        </association>
        <collection  property="replyList"  resultMap="replyMap" ofType="CommentPO"/>
    </resultMap>

    <resultMap id="replyMap" type="CommentPO">
        <id column="reply_id" property="id"/>
        <result column="reply_content" property="content"/>
        <result column="reply_replied_id" property="repliedId"/>
        <result column="reply_state" property="state"/>
        <result column="reply_gmt_create" property="gmtCreate"/>
        <association property="toVisitor" javaType="VisitorPO">
            <result column="reply_to_nickname" property="nickname"/>
        </association>
        <association property="fromVisitor" javaType="VisitorPO">
            <result column="reply_from_nickname" property="nickname"/>
            <result column="reply_from_website" property="website"/>
            <result column="reply_from_avatar" property="avatar"/>
            <result column="reply_from_badge" property="badge"/>
        </association>
    </resultMap>


    <sql id="selectReply">
        SELECT
            reply1.`id` AS reply_id,
            reply1.topic_id AS reply_topic_id,
            reply1.replied_id AS reply_replied_id,
            reply1.content AS reply_content,
            reply1.state AS reply_state,
            reply1.gmt_create AS reply_gmt_create,
            reply_to.nickname AS reply_to_nickname,
            reply_from.nickname AS reply_from_nickname,
            reply_from.website AS reply_from_website,
            reply_from.avatar AS reply_from_avatar,
            reply_from.badge AS reply_from_badge
        FROM
            zhousb_comment AS reply1
            LEFT JOIN zhousb_visitor AS reply_from ON reply1.from_vid = reply_from.id
            LEFT JOIN zhousb_visitor AS reply_to ON reply1.to_vid = reply_to.id AND reply1.replied_id IS NOT NULL
    </sql>

    <insert id="save" parameterType="CommentPO" >
        INSERT INTO zhousb_comment(
             blog_id ,
             topic_id,
             replied_id ,
             to_vid,
             from_vid ,
             content ,
             state ,
             gmt_create , 
             gmt_modified 
        )
        VALUES(
            #{blogId} ,
            #{topicId} ,
            #{repliedId} ,
            #{toVisitor.id},
            #{fromVisitor.id},
            #{content} ,
            0 ,
            NOW() ,
            NOW()
        )
    </insert>


    <select id="get" parameterType="CommentDTO" resultMap="commentMap">
        SELECT
            blog_id,
            topic_id,
            state,
            from_vid AS topic_from_id
        FROM
            zhousb_comment
        WHERE id = #{id}
    </select>

    <select id="list"  resultMap="commentMap">
        SELECT
            topic.*,
            reply.*
        FROM
        (
            SELECT
                topic.id,
                topic.content,
                topic.gmt_create,
                topic.state,
                topic_from.nickname AS topic_from_nickname,
                topic_from.website AS topic_from_website,
                topic_from.avatar AS topic_from_avatar,
                topic_from.badge AS topic_from_badge,
                ( SELECT count( 0 ) FROM zhousb_comment WHERE topic_id = topic.id ) AS reply_count
            FROM
                zhousb_comment AS topic
                LEFT JOIN zhousb_visitor AS topic_from ON topic.from_vid = topic_from.id
            <where>
                topic.topic_id = 0
                AND (topic.state = 1 or topic.from_vid = #{dto.fromVisitor.id})
                AND topic.blog_id = #{dto.blogId}
            </where>
            ORDER BY topic.id DESC
            LIMIT ${(page.page - 1) * page.limit}, #{page.limit}
        ) topic
        LEFT JOIN (
            <include refid="selectReply"/>
            WHERE
                reply1.topic_id != 0
                AND (reply1.state = 1 or reply1.from_vid = #{dto.fromVisitor.id})
                AND 3 > (
                    SELECT
                        count( reply2.id )
                    FROM
                        zhousb_comment AS reply2
                    WHERE
                        reply1.topic_id = reply2.topic_id  AND reply1.id &gt; reply2.id
                )
        ) AS reply ON topic.id = reply.reply_topic_id
    </select>


    <select id="listReply" resultMap="replyMap" >
        <include refid="selectReply"/>
        <where>
            reply1.topic_id = #{dto.topicId}
            AND (reply1.state = 1 or reply1.from_vid = #{dto.fromVisitor.id})
        </where>
        LIMIT ${(page.page - 1) * page.limit + 3}, #{page.limit}
    </select>


    <select id="count" parameterType="CommentDTO" resultType="integer">
        select
            count(0)
        from zhousb_comment
        <where>
            (state = 1 or from_vid = #{fromVisitor.id})
            <if test="topicId == null">AND topic_id IS NULL</if>
            <if test="topicId != null">AND topic_id  = #{topicId}</if>
            <if test="blogId != null">AND blog_id = #{blogId}</if>
        </where>
    </select>

</mapper>
